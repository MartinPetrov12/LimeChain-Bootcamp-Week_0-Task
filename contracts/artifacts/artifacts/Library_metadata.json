{
	"compiler": {
		"version": "0.8.19+commit.7dd6d404"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "_getAllTimeBorrowers",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "_getBooks",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "bookId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "copies",
								"type": "uint256"
							},
							{
								"internalType": "address[]",
								"name": "usersHavingIt",
								"type": "address[]"
							},
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							}
						],
						"internalType": "struct Book[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "_bookCopies",
						"type": "uint256"
					}
				],
				"name": "addBooks",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAvailableBooks",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "bookId",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							}
						],
						"internalType": "struct BookAndId[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_desiredBookId",
						"type": "uint256"
					}
				],
				"name": "reserveBook",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_bookId",
						"type": "uint256"
					}
				],
				"name": "returnBook",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addBooks(string,uint256)": {
					"notice": "The function allows the owner of the contract to add books to the library. The amount of copies has to be a positive number. BookIdNonce is an identifier, which is unique for each book."
				},
				"constructor": {
					"notice": "Initializes the contract. Sets the bookIdNonce to 0"
				},
				"getAvailableBooks()": {
					"notice": "The function returns the books available for borrow. It does that by looping through the array of books and  checking which books have more copies than the amount of users who have currently borrowed the book.  The return object consists of the id an name of the book."
				},
				"reserveBook(uint256)": {
					"notice": "The function reserves the book if the following conditiosn are met: - a book with such id exists - if there are available copies - if the user requesting it does not have a copy of it  If a book is reserved: - the user is pushed in 'usersHavingIt' list of the book - the id of the book is saved in the mapping 'userToBooks' - if it's the first time a book is reserved from the  address of the message sender, it is pushed in 'allTimeHistory'"
				},
				"returnBook(uint256)": {
					"notice": "The function allows the user to return a book. First, it is checked whether has reserved any books at all. That is needed since a memory array is created and it's size can not be less than 0.  Then, it is checked if a book with such id exists and whether the user currently has it. If both conditions are met,  the book is removed from the mapping 'userToBooks\" and  'usersHavingIt' is updated for the book."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/artifacts/Library.sol": "Library"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/artifacts/Library.sol": {
			"keccak256": "0xa097ec4cab91140c0beb0aad28cbfe5f617af7e73bea64649e2d5bd6c77d5032",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://355e7d74efc29f5602ca6455b827ae924ff8afbe7d4158ba03a3273747f52bce",
				"dweb:/ipfs/QmSxcbPaXondvnu2uVZgNdvQjxBCCFqP7na9FVds21qo2R"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol": {
			"keccak256": "0x923b9774b81c1abfb992262ae7763b6e6de77b077a7180d53c6ebb7b1c8bd648",
			"license": "MIT",
			"urls": [
				"bzz-raw://53445dc0431f9b45c06f567c6091da961d4087bec0010cca5bd62100fa624a38",
				"dweb:/ipfs/QmNvBYpBv183czrAqNXr76E8M3LF93ouAJFeAcHfb59Rcx"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		}
	},
	"version": 1
}